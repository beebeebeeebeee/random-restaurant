<html>
<head>
    <meta charset="utf-8">

    <title>Alert Config</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <style>
        .row {
            margin: 1rem 0;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        #tbody input {
            width: 15vw;
            border: none;
            background: transparent;
        }
    </style>
</head>
<body>
<script>
    const publicUrl = '<%- publicUrl %>';
    const alertId = <%- result.id %>;
    let result = <%- JSON.stringify(result) %>;
    let restaurantList = []

    function displayConfigTable() {
        document.getElementById('boardId').value = result.boardId
        document.getElementById('dailyPeopleSize').value = result.dailyPeopleSize
        document.getElementById('numberOfRandom').value = result.numberOfRandom
        document.getElementById('notifyTime').value = result.notifyTime?.substring(0, 5) || ''
        document.getElementById('scheduleTime').value = result.scheduleTime?.substring(0, 5) || ''
        document.getElementById('scheduleEnableWeekdayOnly').checked = result.scheduleEnableWeekdayOnly
        document.getElementById('scheduleEnableNotHoliday').checked = result.scheduleEnableNotHoliday
    }

    async function apiGetConfig() {
        result = await fetch(`${publicUrl}/api/alertId/${alertId}`).then(res => res.json())
    }

    async function getNewConfigAndDisplayConfigTable(){
        await apiGetConfig()
        await readRestaurantListAndUpdateTable()
        displayConfigTable()
    }

    async function updateConfigTable(id) {
        const payload = {
            id: alertId,
            boardId: document.getElementById('boardId').value,
            dailyPeopleSize: document.getElementById('dailyPeopleSize').value,
            numberOfRandom: document.getElementById('numberOfRandom').value,
            notifyTime: document.getElementById('notifyTime').value == '' ? null : document.getElementById('notifyTime').value + ":00",
            scheduleTime: document.getElementById('scheduleTime').value == '' ? null : document.getElementById('scheduleTime').value + ":00",
            scheduleEnableWeekdayOnly: document.getElementById('scheduleEnableWeekdayOnly').checked,
            scheduleEnableNotHoliday: document.getElementById('scheduleEnableNotHoliday').checked
        }
        await fetch(`${publicUrl}/api/alertId/${alertId}`, {
            headers: {
                'Content-Type': 'application/json'
            },
            method: "PATCH",
            body: JSON.stringify(payload)
        })
        await getNewConfigAndDisplayConfigTable(id)
    }

    let restaurantTableOnEditId
    let isRestaurantTableInputFocusOut = false

    function restaurantTableOnEdit(id) {
        isRestaurantTableInputFocusOut = false
        // first calling method
        if (restaurantTableOnEditId == null) {
            restaurantTableOnEditId = id
            return
        }

        // same row, no action
        if (restaurantTableOnEditId == id) {
            return;
        }

        // different row, save changes
        if (restaurantTableOnEditId != id) {

            updateRestaurant(restaurantTableOnEditId, {
                restaurant: document.getElementById(`${restaurantTableOnEditId}-restaurant`).value,
                weight: document.getElementById(`${restaurantTableOnEditId}-weight`).value,
                peopleLimit: document.getElementById(`${restaurantTableOnEditId}-peopleLimit`).value
            })
            restaurantTableOnEditId = id
        }
    }

    let blurTimeout

    function inputBlur(id) {
        isRestaurantTableInputFocusOut = true
        if (blurTimeout != null) clearTimeout(blurTimeout)
        blurTimeout = setTimeout(async () => {
            if (isRestaurantTableInputFocusOut) {
                restaurantTableOnEditId = null
                await updateRestaurant(id, {
                    restaurant: document.getElementById(`${id}-restaurant`).value,
                    weight: document.getElementById(`${id}-weight`).value,
                    peopleLimit: document.getElementById(`${id}-peopleLimit`).value
                })

                clearTimeout(blurTimeout)
                blurTimeout = null
            }
        }, 500)
    }

    function displayRestaurantTable(id) {
        if (id == null) {
            const ele = document.querySelector('#tbody')
            ele.innerHTML = [...restaurantList.map(e => `
                <tr>${[...Object.entries(e).map(([k, v]) => {
                if (!['restaurant', 'weight', 'peopleLimit'].includes(k)) return
                return `<input value="${v}" onclick="restaurantTableOnEdit(${e.id})" onblur="inputBlur(${e.id})" id="${e.id}-${k}"/>`
            }).filter(e => e != null), `
                <button type="button" class="btn btn-danger btn-sm" onclick="removeRestaurant(${e.id})">
                    <i class="bi bi-trash3-fill"></i>
                </button>
            `].map(k => `<td>${k}</td>`).join('')}</tr>`), `
                    <tr>
                        <td colspan="4">
                            <button onclick="addRestaurant()" type="button" class="btn btn-primary">
                                <i class="bi bi-plus"></i>
                            </button>
                        </td>
                    </tr>
            `].join('')
        } else {
            const restaurant = restaurantList.find(e => e.id == id)

            document.getElementById(`${id}-restaurant`).value = restaurant.restaurant
            document.getElementById(`${id}-weight`).value = restaurant.weight
            document.getElementById(`${id}-peopleLimit`).value = restaurant.peopleLimit
        }
    }

    async function readRestaurantListAndUpdateTable(id) {
        restaurantList = await fetch(`${publicUrl}/api/boardId/${result.boardId}`).then(res => res.json())
        displayRestaurantTable(id)
    }

    async function addRestaurant() {
        if (blurTimeout != null) {
            await new Promise((resolve) => {
                let intervalTimeout
                setInterval(() => {
                    if (blurTimeout == null) {
                        if (intervalTimeout != null) clearTimeout(intervalTimeout)
                        return resolve()
                    }
                }, 10)
                intervalTimeout = setTimeout(() => {
                    resolve()
                }, 1000)
            })
        }
        await fetch(`${publicUrl}/api/boardId/${boardId}`, {
            headers: {
                'Content-Type': 'application/json'
            },
            method: "POST",
            body: JSON.stringify({
                boardId: boardId,
                restaurant: "",
                weight: "",
                peopleLimit: -1
            })
        })
        await readRestaurantListAndUpdateTable()
    }

    async function updateRestaurant(id, payload) {
        await fetch(`${publicUrl}/api/id/${id}`, {
            headers: {
                'Content-Type': 'application/json'
            },
            method: "PATCH",
            body: JSON.stringify({boardId, ...payload})
        })
        await readRestaurantListAndUpdateTable(id)
    }

    async function removeRestaurant(id) {
        await fetch(`${publicUrl}/api/id/${id}`, {
            method: "DELETE"
        })
        await readRestaurantListAndUpdateTable()
    }

    document.addEventListener('DOMContentLoaded', async () => {
        displayConfigTable()
        await readRestaurantListAndUpdateTable()
    })

</script>

<div class="container">
    <div class="row">
        <div class="col">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">Alert Config:</h5>
                    <p class="card-text">Alert ID: <%- result.id %></p>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <form>
                <div class="form-group">
                    <label for="boardId">Board Id</label>
                    <input type="number" class="form-control" id="boardId" onblur="updateConfigTable('boardId')">
                </div>
                <div class="form-group">
                    <label for="dailyPeopleSize">Daily People Size</label>
                    <input type="number" class="form-control" id="dailyPeopleSize" onblur="updateConfigTable('dailyPeopleSize')">
                </div>
                <div class="form-group">
                    <label for="numberOfRandom">Number Of Random</label>
                    <input type="number" class="form-control" id="numberOfRandom" onblur="updateConfigTable('numberOfRandom')">
                </div>
                <div class="form-group">
                    <label for="notifyTime">Notify Time</label>
                    <input type="time" class="form-control" id="notifyTime" onblur="updateConfigTable('notifyTime')">
                </div>
                <div class="form-group">
                    <label for="scheduleTime">Schedule Time</label>
                    <input type="time" class="form-control" id="scheduleTime" onblur="updateConfigTable('scheduleTime')">
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="scheduleEnableWeekdayOnly"
                               onclick="updateConfigTable('scheduleEnableWeekdayOnly')">
                        <label class="form-check-label" for="scheduleEnableWeekdayOnly">
                            Enable Weekday Only
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="scheduleEnableNotHoliday"
                               onclick="updateConfigTable('scheduleEnableNotHoliday')"
                        <label class="form-check-label" for="scheduleEnableNotHoliday">
                            Enable Not Holiday
                        </label>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <table class="table table-hover">
                <thead class="table-light">
                <tr>
                    <th>
                        Restaurant
                    </th>
                    <th>
                        Weight
                    </th>
                    <th>
                        People Limit
                    </th>
                    <th>
                        Action
                    </th>
                </tr>
                </thead>
                <tbody id="tbody"></tbody>
            </table>
        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8"
        crossorigin="anonymous"></script>

</body>
</html>
