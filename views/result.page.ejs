<html>
<head>
    <meta charset="utf-8">

    <title><%- title %></title>

    <meta property="og:title" content="<%- title %>">
    <meta name="twitter:title" content="<%- title %>">

    <meta name="description" content="Today's restaurant: <%- restaurant %>">
    <meta property="og:description" content="Today's restaurant: <%- restaurant %>">
    <meta name="twitter:description" content="Today's restaurant: <%- restaurant %>">

    <meta property="og:image"
          content="<%- publicUrl %>/image/boardId/<%- boardId %>/seed/<%- seed %>/<%- search.replace('?','') %>">
    <meta name="twitter:image"
          content="<%- publicUrl %>/image/boardId/<%- boardId %>/seed/<%- seed %>/<%- search.replace('?','') %>">
    <link rel="icon" type="image/x-icon" href="<%- image %>">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <style>
        .row {
            margin: 1rem 0;
        }

        input {
            width: 15vw;
            border: none;
            background: transparent;
        }
    </style>
</head>
<body>
<script>
    const publicUrl = '<%- publicUrl %>'
    const boardId = '<%- boardId %>'
    let restaurantList = <%- JSON.stringify(restaurantList) %>;

    function redraw() {
        window.location.href = `${publicUrl || ''}/boardId/${boardId}/seed/${Math.random().toString().slice(2)}${window.location.search}`
    }

    let restaurantTableOnEditId
    let isRestaurantTableInputFocusOut = false

    function restaurantTableOnEdit(id) {
        isRestaurantTableInputFocusOut = false
        // first calling method
        if (restaurantTableOnEditId == null) {
            restaurantTableOnEditId = id
            return
        }

        // same row, no action
        if (restaurantTableOnEditId == id) {
            return;
        }

        // different row, save changes
        if (restaurantTableOnEditId != id) {

            updateRestaurant(restaurantTableOnEditId, {
                restaurant: document.getElementById(`${restaurantTableOnEditId}-restaurant`).value,
                weight: document.getElementById(`${restaurantTableOnEditId}-weight`).value,
                peopleLimit: document.getElementById(`${restaurantTableOnEditId}-peopleLimit`).value
            })
            restaurantTableOnEditId = id
        }
    }

    let blurTimeout

    function inputBlur(id) {
        isRestaurantTableInputFocusOut = true
        if (blurTimeout != null) clearTimeout(blurTimeout)
        blurTimeout = setTimeout(async () => {
            if (isRestaurantTableInputFocusOut) {
                restaurantTableOnEditId = null
                await updateRestaurant(id, {
                    restaurant: document.getElementById(`${id}-restaurant`).value,
                    weight: document.getElementById(`${id}-weight`).value,
                    peopleLimit: document.getElementById(`${id}-peopleLimit`).value
                })

                clearTimeout(blurTimeout)
                blurTimeout = null
            }
        }, 500)
    }

    function updateRestaurantTable(id) {
        if (id == null) {
            const ele = document.querySelector('#tbody')
            ele.innerHTML = [...restaurantList.map(e => `
                <tr>${[...Object.entries(e).map(([k, v]) => {
                if (!['restaurant', 'weight', 'peopleLimit'].includes(k)) return
                return `<input value="${v}" onclick="restaurantTableOnEdit(${e.id})" onblur="inputBlur(${e.id})" id="${e.id}-${k}"/>`
            }).filter(e => e != null), `
                <button type="button" class="btn btn-danger btn-sm" onclick="removeRestaurant(${e.id})">
                    <i class="bi bi-trash3-fill"></i>
                </button>
            `].map(k => `<td>${k}</td>`).join('')}</tr>`), `
                    <tr>
                        <td colspan="4">
                            <button onclick="addRestaurant()" type="button" class="btn btn-primary">
                                <i class="bi bi-plus"></i>
                            </button>
                        </td>
                    </tr>
            `].join('')
        } else {
            const restaurant = restaurantList.find(e => e.id == id)

            document.getElementById(`${id}-restaurant`).value = restaurant.restaurant
            document.getElementById(`${id}-weight`).value = restaurant.weight
            document.getElementById(`${id}-peopleLimit`).value = restaurant.peopleLimit
        }
    }

    async function readRestaurantListAndUpdateTable(id) {
        restaurantList = await fetch(`${publicUrl}/api/boardId/${boardId}`).then(res => res.json())
        updateRestaurantTable(id)
    }

    async function addRestaurant() {
        if (blurTimeout != null) {
            await new Promise((resolve) => {
                let intervalTimeout
                setInterval(() => {
                    if (blurTimeout == null) {
                        if (intervalTimeout != null) clearTimeout(intervalTimeout)
                        return resolve()
                    }
                }, 10)
                intervalTimeout = setTimeout(() => {
                    resolve()
                }, 1000)
            })
        }
        await fetch(`${publicUrl}/api/boardId/${boardId}`, {
            headers: {
                'Content-Type': 'application/json'
            },
            method: "POST",
            body: JSON.stringify({
                boardId: boardId,
                restaurant: "",
                weight: "",
                peopleLimit: -1
            })
        })
        await readRestaurantListAndUpdateTable()
    }

    async function updateRestaurant(id, payload) {
        await fetch(`${publicUrl}/api/id/${id}`, {
            headers: {
                'Content-Type': 'application/json'
            },
            method: "PATCH",
            body: JSON.stringify({boardId, ...payload})
        })
        await readRestaurantListAndUpdateTable(id)
    }

    async function removeRestaurant(id) {
        await fetch(`${publicUrl}/api/id/${id}`, {
            method: "DELETE"
        })
        await readRestaurantListAndUpdateTable()
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateRestaurantTable()
    })

</script>

<div class="container text-center">
    <div class="row">
        <div class="col">
            <button onclick="redraw()" type="button" class="btn btn-primary" style="width: 100%">
                Re-Draw!
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Today's restaurant:</h5>
                    <p class="card-text"><%- restaurant %></p>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <table class="table table-hover">
                <thead class="table-light">
                <tr>
                    <th>
                        Restaurant
                    </th>
                    <th>
                        Weight
                    </th>
                    <th>
                        People Limit
                    </th>
                    <th>
                        Action
                    </th>
                </tr>
                </thead>
                <tbody id="tbody"></tbody>
            </table>
        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8"
        crossorigin="anonymous"></script>

</body>
</html>
